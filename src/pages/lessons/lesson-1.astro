---
import LessonLayout from '../../layouts/LessonLayout.astro';
import CodeBlock from '../../components/CodeBlock.astro';

const jsExample = `// JavaScript
let message = 'Hello World';
let count = 42;
let isActive = true;
let user = { name: 'John', age: 30 };
let items = ['apple', 'orange', 'banana'];
let anything = 'string';  // can be reassigned to any type
anything = 100;           // valid in JavaScript
anything = { key: 'value' }; // also valid`;

const tsExample = `// TypeScript
let message: string = 'Hello World';
let count: number = 42;
let isActive: boolean = true;
let user: { name: string, age: number } = { name: 'John', age: 30 };
let items: string[] = ['apple', 'orange', 'banana'];
let anything: any = 'string';  // explicit 'any' type
anything = 100;                // still valid with 'any' type
anything = { key: 'value' };   // still valid with 'any' type

// Type inference - TypeScript can infer types when initialized
let inferred = 'Hello';  // TypeScript infers string type
// inferred = 42;        // Error: Type 'number' is not assignable to type 'string'`;

const functionExample = `// JavaScript function
function add(a, b) {
  return a + b;  // Works for numbers, but also strings (concatenation)
}

// TypeScript function
function addNumbers(a: number, b: number): number {
  return a + b;  // Only works with numbers, guaranteed to return a number
}

// Error example
// addNumbers('hello', 'world'); // Error: Argument of type 'string' is not assignable to parameter of type 'number'`;
---

<LessonLayout title="TypeScript Basics" number={1}>
  <p>
    TypeScript is a superset of JavaScript, which means all valid JavaScript code is also valid TypeScript code.
    TypeScript adds static type checking to JavaScript, allowing you to catch errors early during development.
  </p>

  <h2>Key Differences</h2>
  
  <p>
    The main difference between JavaScript and TypeScript is the <strong>type system</strong>. In JavaScript, 
    variables can change types at runtime. In TypeScript, each variable has a specific type that is checked
    during compilation.
  </p>

  <h3>Basic Types</h3>

  <p>Let's compare how variables are declared in JavaScript versus TypeScript:</p>

  <CodeBlock code={jsExample} language="javascript" title="JavaScript" />
  <CodeBlock code={tsExample} title="TypeScript" />

  <h3>Functions with Types</h3>

  <p>
    One of the biggest benefits of TypeScript is adding type information to function parameters and return values:
  </p>

  <CodeBlock code={functionExample} title="Functions in JavaScript vs TypeScript" />

  <h2>Benefits for JavaScript Developers</h2>
  
  <ul>
    <li><strong>Better tooling</strong>: Enhanced autocompletion, inline documentation, and refactoring tools</li>
    <li><strong>Catch errors early</strong>: Many runtime errors become compile-time errors</li>
    <li><strong>Self-documenting code</strong>: Types serve as documentation for other developers</li>
    <li><strong>Safer refactoring</strong>: The compiler helps ensure you don't break existing code</li>
  </ul>

  <div class="info-box">
    <h3>Key Takeaway</h3>
    <p>
      TypeScript doesn't change how your code runs - it's simply a development tool that helps
      you write more reliable JavaScript. All TypeScript code compiles down to plain JavaScript.
    </p>
  </div>
</LessonLayout>

<style>
  h2 {
    margin-top: 2rem;
    font-size: 1.5rem;
  }
  
  h3 {
    margin-top: 1.5rem;
    font-size: 1.2rem;
  }
  
  p {
    margin: 1rem 0;
    line-height: 1.6;
  }
  
  ul {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }
  
  li {
    margin-bottom: 0.5rem;
    line-height: 1.5;
  }
  
  .info-box {
    background-color: #EFF6FF;
    border-left: 4px solid #3178c6;
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 4px 4px 0;
  }
  
  .info-box h3 {
    margin-top: 0;
    color: #3178c6;
  }
  
  .info-box p {
    margin-bottom: 0;
  }
</style> 