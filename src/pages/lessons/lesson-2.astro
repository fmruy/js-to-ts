---
import LessonLayout from '../../layouts/LessonLayout.astro';
import CodeBlock from '../../components/CodeBlock.astro';

const variableExample = "// Type annotations with variables\nlet username: string = 'alex123';\nlet userId: number = 42;\nlet isAdmin: boolean = false;\nlet userPreferences: string[] = ['dark_mode', 'notifications_on'];\nlet lastLogin: Date = new Date();\n\n// Type annotations with initialization\nlet score = 100;            // Type is inferred as number\nlet player = 'Player One';  // Type is inferred as string\nlet active = true;          // Type is inferred as boolean";

const objectExample = "// Object type annotations\nlet user: {\n  id: number;\n  name: string;\n  email: string;\n  active?: boolean;  // Optional property (may be undefined)\n} = {\n  id: 1,\n  name: 'Alex',\n  email: 'alex@example.com'\n  // active is optional, so we can omit it\n};\n\n// Nested object type annotations\nlet product: {\n  id: number;\n  name: string;\n  price: number;\n  category: {\n    id: number;\n    name: string;\n  }\n} = {\n  id: 101,\n  name: 'TypeScript Course',\n  price: 49.99,\n  category: {\n    id: 3,\n    name: 'Programming'\n  }\n};";

const functionExample = "// Function parameter and return type annotations\nfunction calculateTotal(price: number, quantity: number): number {\n  return price * quantity;\n}\n\n// Optional parameters (use ? after parameter name)\nfunction greetUser(name: string, title?: string): string {\n  if (title) {\n    return `Hello, ${title} ${name}!`;\n  }\n  return `Hello, ${name}!`;\n}\n\n// Default parameters (provide default value)\nfunction createUser(\n  name: string, \n  age: number = 30, \n  isActive: boolean = true\n): { name: string; age: number; isActive: boolean } {\n  return { name, age, isActive };\n}\n\n// Rest parameters with type annotations\nfunction sum(...numbers: number[]): number {\n  return numbers.reduce((total, num) => total + num, 0);\n}";

const unionExample = "// Union type (can be one of several types)\nlet userId: string | number;\nuserId = 123;      // Valid\nuserId = 'ABC123'; // Also valid\n// userId = true;  // Error: Type 'boolean' is not assignable to type 'string | number'\n\n// Function with union types\nfunction displayId(id: string | number): void {\n  console.log(`ID: ${id}`);\n}\n\n// Type narrowing with union types\nfunction formatId(id: string | number): string {\n  if (typeof id === 'string') {\n    // TypeScript knows id is a string in this block\n    return id.toUpperCase();\n  } else {\n    // TypeScript knows id is a number in this block\n    return `ID-${id.toString().padStart(5, '0')}`;\n  }\n}";
---

<LessonLayout title="Type Annotations" number={2}>
  <p>
    Type annotations are the core feature of TypeScript that allows you to explicitly define
    the types of variables, function parameters, return values, and more.
  </p>

  <h2>Basic Type Annotations</h2>
  
  <p>
    Type annotations use a simple syntax: a colon followed by the type name after the variable,
    parameter, or function name.
  </p>

  <CodeBlock code={variableExample} title="Variable Type Annotations" />

  <div class="info-box">
    <h3>Type Inference</h3>
    <p>
      TypeScript can often infer types automatically when you initialize variables.
      Explicit type annotations are not always necessary but can improve code readability
      and catch errors when variable initialization happens elsewhere.
    </p>
  </div>

  <h2>Object Type Annotations</h2>
  
  <p>
    TypeScript allows you to define the shape of objects with detailed property types.
  </p>

  <CodeBlock code={objectExample} title="Object Type Annotations" />

  <h2>Function Type Annotations</h2>
  
  <p>
    Functions can have type annotations for parameters and return values.
  </p>

  <CodeBlock code={functionExample} title="Function Type Annotations" />

  <h2>Union Types</h2>
  
  <p>
    Sometimes a value could be one of several types. TypeScript allows you to use union types to represent these cases.
  </p>

  <CodeBlock code={unionExample} title="Union Types" />

  <div class="info-box">
    <h3>Key Takeaway</h3>
    <p>
      Type annotations help catch errors during development rather than runtime.
      They act as living documentation that helps you and your team understand
      how different parts of your code should be used.
    </p>
  </div>
</LessonLayout>

<style>
  h2 {
    margin-top: 2rem;
    font-size: 1.5rem;
  }
  
  h3 {
    margin-top: 1.5rem;
    font-size: 1.2rem;
  }
  
  p {
    margin: 1rem 0;
    line-height: 1.6;
  }
  
  ul {
    margin: 1rem 0;
    padding-left: 1.5rem;
  }
  
  li {
    margin-bottom: 0.5rem;
    line-height: 1.5;
  }
  
  .info-box {
    background-color: #EFF6FF;
    border-left: 4px solid #3178c6;
    padding: 1rem 1.5rem;
    margin: 1.5rem 0;
    border-radius: 0 4px 4px 0;
  }
  
  .info-box h3 {
    margin-top: 0;
    color: #3178c6;
  }
  
  .info-box p {
    margin-bottom: 0;
  }
</style> 